"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'mvwd6&yanx+_+kwep9$bzu+x_b5v04czf3yntpo_74ic+k9-ye'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/project_static/'







##############################################################

PROJECT_NAME = 'mysite'

if not os.path.exists(os.path.join(BASE_DIR, 'templates')):
    os.makedirs(os.path.join(BASE_DIR, 'templates'))


STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, 'templates'),
)

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)


LOG_DIR = os.path.join(BASE_DIR, PROJECT_NAME, 'logs')
DELETE_LOGS = False

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)
else:
    if DELETE_LOGS:
        files = [f for f in os.listdir(LOG_DIR)]
        for f in files:
            os.remove(os.path.join(LOG_DIR, f))


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s %(filename)s: %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        }
    },
    'handlers': {
        'tasks': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '%s/tasks.log' % LOG_DIR,
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 100,  # 100 mb
        },
        'debug': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'DEBUG',
            'filename': '%s/debug.log' % LOG_DIR,
            'maxBytes': 1024*1024,
            'backupCount': 7,
            'formatter': 'verbose',
        },
        'crawler': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'INFO',
            'filename': '%s/crawler.log' % LOG_DIR,
            'maxBytes': 1024*1024,
            'backupCount': 7,
            'formatter': 'verbose',
        },
        'manager': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'DEBUG',
            'filename': '%s/manager.log' % LOG_DIR,
            'maxBytes': 1024*1024,
            'backupCount': 7,
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'erithacus': {
            'handlers': [
                'debug'
            ],
            'propagate': 'TRUE',
            'level': 'ERROR'
        },
        'core.crawler': {
            'handlers': ['crawler'],
            'level': 'DEBUG'
        },
        'db.manager': {
            'handlers': ['manager'],
            'level': 'DEBUG'
        },
        'Twitter.tasks': {
            'handlers': ['tasks'],
            'level': 'INFO'
        },
        '': {
            'handlers': ['debug', 'crawler'],
            'level': 'DEBUG'
        }

    }
}

# from logging.config import dictConfig
# dictConfig(LOGGING)

STATIC_ROOT = os.path.join(BASE_DIR, '..', 'ST_static')

if not os.path.exists(STATIC_ROOT):
    os.makedirs(STATIC_ROOT)






